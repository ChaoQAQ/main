hypertext  超文本
transport  运送 传输 
protocol   协议
post	邮递

1. 创建 XMLHttpRequest 对象 该对象是浏览器的对象 是构造函数调用需要前面 ＋ new
const xhr = new XMLHttpRequest();

2. AJAX 向服务器发送请求 使用 XMLHttpRequest 对象的 open() 和 send()方法
(1) open(method,url,async); 规定请求的类型 URL 以及是否异步处理请求
(2) send(string) 将请求发送到服务器

3. GET 还是 POST？ 与 POST 相比 GET 更简单也更快 并且在大部分情况下都能用  然而 在以下情况中 请使用 POST 请求
(1) 不愿使用缓存文件（更新服务器上的文件或数据库）
(2) 向服务器发送大量数据（POST 没有数据量限制）
(3) 发送包含未知字符的用户输入时 POST 比 GET 更稳定也更可靠

4. GET 请求
(1) 为了避免重复请求得到缓存的结果 向 URL 添加一个随机数唯一的 ID
(2) 如果想通过 GET 方法发送信息 就在 URL 添加信息 以 ？ 后面 采用键值对形式 a=1 多个信息以 & 符分隔开 
xhr.open("GET", "http://127.0.0.1:8001/server?t="+ Math.random()+'&fname=Henry&lname=Ford', true); 
xhr.send();

5. POST 请求
(1) 一个简单的 POST 请求
xhr.open("POST", "http://127.0.0.1:8001/server", true);
xhr.send();

(2) 如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据 
xhr.open("POST", "http://127.0.0.1:8001/server", true);
xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xhr.send("fname=Henry&lname=Ford");

6. setRequestHeader(header, value) 方法 向请求添加 HTTP 头
header: 规定头的名称 Content-type
value: 规定头的值 application/x-www-form-urlencoded

onreadystatechange 事件
on when 当...时候
readystate 是 xhr 对象中的属性 表示状态 0表示未初始化 1表示open方法调用完毕 2表示send方法调用完毕 3服务端返回了部分的结果 4服务端返回了所有的结果
change 改变 一共触发4次

当请求被发送到服务器时 就会执行服务端响应的任务 每当 readyState 的状态改变时 就会触发 onreadystatechange 事件
readyState 属性有 XMLHttpRequest 的状态信息
下面是 XMLHttpRequest 对象的三个重要的属性
onreadystatechange	该事件每当 readyState 属性的状态信息改变时 就会调用该函数
readyState 有 XMLHttpRequest 的状态信息 从 0 到 4 发生变化
0: 请求未初始化
1: 服务器连接已建立
2: 请求已接收
3: 请求处理中
4: 请求已完成，且响应已就绪
status 表示状态信息 200: "OK" 404: 未找到页面

// 1. 引入 express
const express = require('express');

// 2. 创建应用对象
const app = express(); // 当callback为外部文件时，用req.app访问express的实例

// 3. 创建路由规则
// request 是对请求报文的封装
// response 是对响应报文的封装
app.get('/', (requset, response) => { // get 获取指定 http请求头 以 / 开头
    // 设置相应
    response.send('hello express'); // 请求成功 响应报文传递数据 字符串格式 hello express 仅用于 POST 请求
});

// 4. 监听端口启动服务
app.listen(8001, () => {
    console.log('服务已经启动，访问地址为 http://127.0.0.1:8001');
})

 // abort 方法取消请求
// 超时设置 2s 超过时间就取消发送
            xhr.timeout = 2000;
            // 超时回调函数
            xhr.ontimeout = function () {
                alert('网络异常，请稍后重试');
            }

// axios 通用写法
            axios({
                // 1. 请求方法
                method: 'POST',
                // 2. URL地址
                url: '/axios',
                // 3. URL参数
                params: {
                    vip: 10, 
                    level: 30
                },
                // 4. 请求头信息
                headers: {
                    a: 100,
                    b: 200
                },
                // 5. 请求体参数
                data: {
                    username: 'admin',
                    password: 'admin'
                }
            }).then(response => {
                // 响应报文
                console.log(response);
                // 响应状态码
                console.log(response.status);
                // 响应状态字符串
                console.log(response.statusText);
                // 响应头信息
                console.log(response.headers);
                // 响应体信息
                console.log(response.data);
            })

fetch('http://127.0.0.1:8080/fetch?a=100&b=200', {
                // 请求方法
                method: 'POST',
                // 设置请求头信息
                headers: {
                    name: 'atguigu'
                },
                // 设置请求体信息
                body: 'username=admin&password=admin'
            }).then(response => {
                return response.text();
            }).then(response => {
                console.log(response);
            })

<!-- JSONP 是一个非官方的跨域解决方案 只支持 GET 请求 有些网页标签天生就具有跨域能力 JSONP就是利用script标签的跨域能力来发送请求的 -->
    <!-- <script></script>标签可以跨域 但是要接收 js 类型的数据代码 -->